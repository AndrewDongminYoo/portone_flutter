# This file configures the analyzer, which statically analyzes Dart code to
# check for errors, warnings, and lints.
#
# The issues identified by the analyzer are surfaced in the UI of Dart-enabled
# IDEs (https://dart.dev/tools#ides-and-editors). The analyzer can also be
# invoked from the command line by running `flutter analyze`.

# The following line activates a set of recommended lints for Flutter apps,
# packages, and plugins designed to encourage good coding practices.
include: package:flutter_lints/flutter.yaml

linter:
  # The lint rules applied to this project can be customized in the
  # section below to disable rules from the `package:flutter_lints/flutter.yaml`
  # included above or to enable additional rules. A list of all available lints
  # and their documentation is published at https://dart.dev/lints.
  #
  # Instead of disabling a lint rule for the entire project in the
  # section below, it can also be suppressed for a single line of code
  # or a specific dart file by using the `// ignore: name_of_lint` and
  # `// ignore_for_file: name_of_lint` syntax on the line or in the file
  # producing the lint.
  rules:
    always_use_package_imports: true
    avoid_dynamic_calls: true
    avoid_final_parameters: true
    avoid_print: true
    comment_references: true
    discarded_futures: true
    empty_constructor_bodies: true
    no_default_cases: true
    no_leading_underscores_for_local_identifiers: true
    omit_local_variable_types: true
    prefer_asserts_with_message: true
    prefer_const_constructors_in_immutables: true
    prefer_final_locals: true
    prefer_mixin: true
    prefer_single_quotes: true
    require_trailing_commas: true
    sort_pub_dependencies: true

# Additional information about this file can be found at
# https://dart.dev/guides/language/analysis-options
analyzer:
  language:
    # Do not cast nullable values to non-nullable types.
    strict-casts: true
    strict-inference: true
    strict-raw-types: true
  errors:
    #########################
    # Enhanced Error Levels #
    #########################
    # Triggered when declared elements like classes, methods, or fields are not used in the code.
    unused_element: error
    # Triggered when fields are declared but not used in the code.
    unused_field: error
    # Triggered when local variables declared within a function or method are not used.
    unused_local_variable: error
    # Triggered when a name declared in the import show clause is not actually used.
    unused_shown_name: error
    # Triggered when imported elements are not used in the file.
    unused_import: error
    # Triggered when a function or method returns a value that is not used.
    unused_result: error
    # Enables a warning for unnecessary null checks.
    unnecessary_null_checks: warning
    # Triggered when constructor parameters are declared but not used within the constructor.
    avoid_unused_constructor_parameters: error
    # Triggered when an exception is caught but not used in the catch block.
    unused_catch_clause: error
    # Triggered when operations on primitive types have no actual effect.
    noop_primitive_operations: error

# Formatter settings
formatter:
  page_width: 80
  trailing_commas: preserve
